{"version":3,"sources":["TriviaApp.js","App.js","index.js"],"names":["socket","io","transports","TriviaApp","name","setName","useState","joined","setJoined","players","setPlayers","question","setQuestion","feedback","setFeedback","showNext","setShowNext","gameOver","setGameOver","useEffect","on","updatedPlayers","console","log","q","finalScores","off","React","createElement","className","type","placeholder","value","onChange","e","target","onClick","joinGame","trim","emit","startGame","dangerouslySetInnerHTML","__html","answers","map","answer","i","key","selected","submitAnswer","nextQuestion","Object","values","p","score","window","location","reload","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2LAMA,MAAMA,EAASC,YAAG,4CAA6C,CAC7DC,WAAY,CAAC,eAGA,SAASC,IACtB,MAAOC,EAAMC,GAAWC,mBAAS,KAC1BC,EAAQC,GAAaF,oBAAS,IAC9BG,EAASC,GAAcJ,mBAAS,KAChCK,EAAUC,GAAeN,mBAAS,OAClCO,EAAUC,GAAeR,mBAAS,KAClCS,EAAUC,GAAeV,oBAAS,IAClCW,EAAUC,GAAeZ,oBAAS,GAGzCa,oBAAU,KACRnB,EAAOoB,GAAG,kBAAoBC,IAC5BC,QAAQC,IAAI,mBAAoBF,GAChCX,EAAWW,KAGbrB,EAAOoB,GAAG,eAAiBI,IACzBZ,EAAYY,GACZV,EAAY,IACZE,GAAY,KAGdhB,EAAOoB,GAAG,YAAcK,IACtBf,EAAWe,GACXP,GAAY,KAGP,KACLlB,EAAO0B,IAAI,mBACX1B,EAAO0B,IAAI,gBACX1B,EAAO0B,IAAI,eAEZ,IAsBH,OACEC,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,MAAIC,UAAU,SAAQ,qCAEpBtB,GACAoB,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,SACEE,KAAK,OACLC,YAAY,kBACZC,MAAO5B,EACP6B,SAAWC,GAAM7B,EAAQ6B,EAAEC,OAAOH,SAEpCL,IAAAC,cAAA,UAAQQ,QAhCCC,KACVjC,EAAKkC,SACVtC,EAAOuC,KAAK,gBAAiBnC,EAAKkC,QAClC9B,GAAU,MA6BuB,cAI9BD,IAAWI,IAAaM,GACvBU,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,yCACHD,IAAAC,cAAA,UAAQQ,QA3BEI,KAChBxC,EAAOuC,KAAK,gBA0BsB,sBAI/BhC,GAAUI,IAAaM,GACtBU,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,MAAIa,wBAAyB,CAAEC,OAAQ/B,EAASA,UAAYkB,UAAU,kBACtEF,IAAAC,cAAA,OAAKC,UAAU,eACZlB,EAASgC,QAAQC,IAAI,CAACC,EAAQC,IAC7BnB,IAAAC,cAAA,UACEmB,IAAKD,EACLjB,4BAA6BiB,EAAI,IACjCV,QAASA,IA7CDY,KACpBhD,EAAOuC,KAAK,gBAAiBS,GAC7BlC,8BAAmCkC,KACnChC,GAAY,IA0CeiC,CAAaJ,GAC5BJ,wBAAyB,CAAEC,OAAQG,OAIzClB,IAAAC,cAAA,SAAIf,GACHE,GAAYY,IAAAC,cAAA,UAAQQ,QAzCRc,KACnBlD,EAAOuC,KAAK,mBAwCsC,kBAI/CtB,GACCU,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,UAAI,2BACJD,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,UACGuB,OAAOC,OAAO3C,GAASmC,IAAI,CAACS,EAAGP,IAC9BnB,IAAAC,cAAA,MAAImB,IAAKD,GACNO,EAAEjD,KAAK,KAAEuB,IAAAC,cAAA,cAASyB,EAAEC,OAAe,aAI1C3B,IAAAC,cAAA,UAAQQ,QAASA,IAAMmB,OAAOC,SAASC,UAAU,eAIrD9B,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,UACGuB,OAAOC,OAAO3C,GAASmC,IAAI,CAACS,EAAGP,IAC9BnB,IAAAC,cAAA,MAAImB,IAAKD,GACNO,EAAEjD,KAAK,KAAGiD,EAAEC,WClHZI,MARf,WACE,OACE/B,IAAAC,cAAA,WACED,IAAAC,cAACzB,EAAS,cCDHwD,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpC,IAAAC,cAACD,IAAMqC,WAAU,KACfrC,IAAAC,cAAC8B,EAAG","file":"static/js/main.e99ee5b7.chunk.js","sourcesContent":["// src/TriviaApp.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport \"./TriviaApp.css\";\r\n\r\n// Connect to your Render Socket.IO backend\r\nconst socket = io(\"https://trivia-socket-server.onrender.com\", {\r\n  transports: [\"websocket\"],\r\n});\r\n\r\nexport default function TriviaApp() {\r\n  const [name, setName] = useState(\"\");\r\n  const [joined, setJoined] = useState(false);\r\n  const [players, setPlayers] = useState({});\r\n  const [question, setQuestion] = useState(null);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const [showNext, setShowNext] = useState(false);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  // ðŸ”Œ Setup socket listeners on mount\r\n  useEffect(() => {\r\n    socket.on(\"players-updated\", (updatedPlayers) => {\r\n      console.log(\"Updated players:\", updatedPlayers);\r\n      setPlayers(updatedPlayers);\r\n    });\r\n\r\n    socket.on(\"new-question\", (q) => {\r\n      setQuestion(q);\r\n      setFeedback(\"\");\r\n      setShowNext(false);\r\n    });\r\n\r\n    socket.on(\"game-over\", (finalScores) => {\r\n      setPlayers(finalScores);\r\n      setGameOver(true);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"players-updated\");\r\n      socket.off(\"new-question\");\r\n      socket.off(\"game-over\");\r\n    };\r\n  }, []);\r\n\r\n  const joinGame = () => {\r\n    if (!name.trim()) return;\r\n    socket.emit(\"player-joined\", name.trim());\r\n    setJoined(true);\r\n  };\r\n\r\n  const submitAnswer = (selected) => {\r\n    socket.emit(\"submit-answer\", selected);\r\n    setFeedback(`âœ… Answer submitted: ${selected}`);\r\n    setShowNext(true);\r\n  };\r\n\r\n  const startGame = () => {\r\n    socket.emit(\"start-game\");\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    socket.emit(\"next-question\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"trivia-container\">\r\n      <h1 className=\"title\">ðŸŽ‰ Kahoot-Style Trivia</h1>\r\n\r\n      {!joined && (\r\n        <div className=\"name-entry\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your name\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n          <button onClick={joinGame}>Join Game</button>\r\n        </div>\r\n      )}\r\n\r\n      {joined && !question && !gameOver && (\r\n        <div>\r\n          <p>Waiting for host to start the game...</p>\r\n          <button onClick={startGame}>Start Game (Host)</button>\r\n        </div>\r\n      )}\r\n\r\n      {joined && question && !gameOver && (\r\n        <div className=\"question-box\">\r\n          <h2 dangerouslySetInnerHTML={{ __html: question.question }} className=\"question-text\" />\r\n          <div className=\"answer-grid\">\r\n            {question.answers.map((answer, i) => (\r\n              <button\r\n                key={i}\r\n                className={`answer-btn btn-${i % 4}`}\r\n                onClick={() => submitAnswer(answer)}\r\n                dangerouslySetInnerHTML={{ __html: answer }}\r\n              />\r\n            ))}\r\n          </div>\r\n          <p>{feedback}</p>\r\n          {showNext && <button onClick={nextQuestion}>Next Question</button>}\r\n        </div>\r\n      )}\r\n\r\n      {gameOver && (\r\n        <div className=\"scoreboard\">\r\n          <h2>ðŸŽ‰ Game Over!</h2>\r\n          <h3>Final Scores:</h3>\r\n          <ul>\r\n            {Object.values(players).map((p, i) => (\r\n              <li key={i}>\r\n                {p.name}: <strong>{p.score}</strong> points\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button onClick={() => window.location.reload()}>Play Again</button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"score-box\">\r\n        <h3>Players:</h3>\r\n        <ul>\r\n          {Object.values(players).map((p, i) => (\r\n            <li key={i}>\r\n              {p.name}: {p.score}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport TriviaApp from \"./TriviaApp\";\n\nfunction App() {\n  return (\n    <div>\n      <TriviaApp />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\"; // optional styling\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}