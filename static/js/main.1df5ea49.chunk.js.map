{"version":3,"sources":["TriviaApp.js","App.js","index.js"],"names":["CATEGORIES","id","name","DIFFICULTIES","TriviaApp","token","setToken","useState","playerName","setPlayerName","nameEntered","setNameEntered","selectedCategory","setSelectedCategory","selectedDifficulty","setSelectedDifficulty","questionsPerRound","setQuestionsPerRound","totalRounds","setTotalRounds","questions","setQuestions","currentIndex","setCurrentIndex","question","setQuestion","correctAnswer","setCorrectAnswer","shuffledAnswers","setShuffledAnswers","feedback","setFeedback","showNext","setShowNext","score","setScore","currentRound","setCurrentRound","gameOver","setGameOver","useEffect","getToken","async","res","fetch","data","json","resetToken","fetchQuestions","url","response_code","results","loadQuestion","alert","questionsArray","index","current","correct_answer","allAnswers","incorrect_answers","sort","Math","random","React","createElement","className","type","placeholder","value","onChange","e","target","onClick","handleNameSubmit","trim","map","cat","key","diff","Number","n","r","startGame","dangerouslySetInnerHTML","__html","answer","i","selected","prev","checkAnswer","nextQuestion","next","length","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1df5ea49.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./TriviaApp.css\";\r\n\r\nconst CATEGORIES = [\r\n  { id: 9, name: \"General Knowledge\" },\r\n  { id: 10, name: \"Books\" },\r\n  { id: 11, name: \"Film\" },\r\n  { id: 12, name: \"Music\" },\r\n  { id: 21, name: \"Sports\" },\r\n  { id: 23, name: \"History\" },\r\n  { id: 27, name: \"Animals\" },\r\n];\r\n\r\nconst DIFFICULTIES = [\"easy\", \"medium\", \"hard\"];\r\n\r\nexport default function TriviaApp() {\r\n  const [token, setToken] = useState(\"\");\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [nameEntered, setNameEntered] = useState(false);\r\n\r\n  const [selectedCategory, setSelectedCategory] = useState(CATEGORIES[0].id);\r\n  const [selectedDifficulty, setSelectedDifficulty] = useState(DIFFICULTIES[0]);\r\n  const [questionsPerRound, setQuestionsPerRound] = useState(5);\r\n  const [totalRounds, setTotalRounds] = useState(1);\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\r\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const [showNext, setShowNext] = useState(false);\r\n\r\n  const [score, setScore] = useState(0);\r\n  const [currentRound, setCurrentRound] = useState(1);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getToken();\r\n  }, []);\r\n\r\n  const getToken = async () => {\r\n    const res = await fetch(\"https://opentdb.com/api_token.php?command=request\");\r\n    const data = await res.json();\r\n    setToken(data.token);\r\n  };\r\n\r\n  const resetToken = async () => {\r\n    if (!token) return;\r\n    await fetch(`https://opentdb.com/api_token.php?command=reset&token=${token}`);\r\n  };\r\n\r\n  const fetchQuestions = async () => {\r\n    if (!token) return;\r\n\r\n    const url = `https://opentdb.com/api.php?amount=${questionsPerRound}&type=multiple&category=${selectedCategory}&difficulty=${selectedDifficulty}&token=${token}`;\r\n    const res = await fetch(url);\r\n    const data = await res.json();\r\n\r\n    if (data.response_code === 0) {\r\n      setQuestions(data.results);\r\n      setCurrentIndex(0);\r\n      loadQuestion(data.results, 0);\r\n    } else if (data.response_code === 4) {\r\n      alert(\"All available questions have been used. Resetting token...\");\r\n      await resetToken();\r\n      setCurrentRound(1);\r\n      setScore(0);\r\n    }\r\n  };\r\n\r\n  const loadQuestion = (questionsArray, index) => {\r\n    const current = questionsArray[index];\r\n    if (!current) return;\r\n\r\n    setQuestion(current.question);\r\n    setCorrectAnswer(current.correct_answer);\r\n    const allAnswers = [...current.incorrect_answers, current.correct_answer];\r\n    setShuffledAnswers(allAnswers.sort(() => Math.random() - 0.5));\r\n    setFeedback(\"\");\r\n    setShowNext(false);\r\n  };\r\n\r\n  const checkAnswer = (selected) => {\r\n    if (selected === correctAnswer) {\r\n      setFeedback(\"✅ Correct!\");\r\n      setScore((prev) => prev + 1);\r\n    } else {\r\n      setFeedback(`❌ Wrong! Correct: ${correctAnswer}`);\r\n    }\r\n    setShowNext(true);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    const next = currentIndex + 1;\r\n    setCurrentIndex(next);\r\n    if (next < questions.length) {\r\n      loadQuestion(questions, next);\r\n    } else {\r\n      if (currentRound < totalRounds) {\r\n        setCurrentRound((r) => r + 1);\r\n        fetchQuestions();\r\n      } else {\r\n        setGameOver(true);\r\n        resetToken(); // token reset at end of game\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    setScore(0);\r\n    setCurrentRound(1);\r\n    setGameOver(false);\r\n    fetchQuestions();\r\n  };\r\n\r\n  const handleNameSubmit = () => {\r\n    if (playerName.trim()) {\r\n      setNameEntered(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"trivia-container\">\r\n      <h1 className=\"title\">Kahoot-Style Trivia</h1>\r\n\r\n      {/* Name entry */}\r\n      {!nameEntered && (\r\n        <div className=\"name-entry\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your name\"\r\n            value={playerName}\r\n            onChange={(e) => setPlayerName(e.target.value)}\r\n          />\r\n          <button onClick={handleNameSubmit}>Continue</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Game Setup */}\r\n      {nameEntered && !question && !gameOver && (\r\n        <div className=\"settings\">\r\n          <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>\r\n            {CATEGORIES.map((cat) => (\r\n              <option key={cat.id} value={cat.id}>{cat.name}</option>\r\n            ))}\r\n          </select>\r\n\r\n          <select value={selectedDifficulty} onChange={(e) => setSelectedDifficulty(e.target.value)}>\r\n            {DIFFICULTIES.map((diff) => (\r\n              <option key={diff} value={diff}>{diff}</option>\r\n            ))}\r\n          </select>\r\n\r\n          <select value={questionsPerRound} onChange={(e) => setQuestionsPerRound(Number(e.target.value))}>\r\n            {[3, 5, 10, 15].map((n) => (\r\n              <option key={n} value={n}>{n} Questions</option>\r\n            ))}\r\n          </select>\r\n\r\n          <select value={totalRounds} onChange={(e) => setTotalRounds(Number(e.target.value))}>\r\n            {[1, 2, 3, 5].map((r) => (\r\n              <option key={r} value={r}>{r} Rounds</option>\r\n            ))}\r\n          </select>\r\n\r\n          <button className=\"start-btn\" onClick={startGame}>Start Game</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Active Question */}\r\n      {question && !gameOver && (\r\n        <div className=\"question-box\">\r\n          <h2 dangerouslySetInnerHTML={{ __html: question }} className=\"question-text\" />\r\n          <div className=\"answer-grid\">\r\n            {shuffledAnswers.map((answer, i) => (\r\n              <button\r\n                key={i}\r\n                className={`answer-btn btn-${i % 4}`}\r\n                onClick={() => checkAnswer(answer)}\r\n                dangerouslySetInnerHTML={{ __html: answer }}\r\n              />\r\n            ))}\r\n          </div>\r\n\r\n          {feedback && <p className=\"feedback\">{feedback}</p>}\r\n          {showNext && <button className=\"next-btn\" onClick={nextQuestion}>Next</button>}\r\n        </div>\r\n      )}\r\n\r\n      {/* Final Scoreboard */}\r\n      {gameOver && (\r\n        <div className=\"scoreboard\">\r\n          <h2>🎉 Game Over!</h2>\r\n          <p>Player: <strong>{playerName}</strong></p>\r\n          <p>Rounds Completed: {totalRounds}</p>\r\n          <p>Final Score: {score} / {totalRounds * questionsPerRound}</p>\r\n          <button onClick={() => setGameOver(false)}>Play Again</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Score display */}\r\n      {!gameOver && nameEntered && (\r\n        <div className=\"score-box\">\r\n          Round {currentRound}/{totalRounds} | Score: {score}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport TriviaApp from \"./TriviaApp\";\n\nfunction App() {\n  return (\n    <div>\n      <TriviaApp />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\"; // optional styling\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}